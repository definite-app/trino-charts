{{- $workerJmx := merge .Values.jmx.worker (omit .Values.jmx "coordinator" "worker") -}}
{{- if gt (int .Values.server.workers) 0 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "trino.worker" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "trino.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  serviceName: {{ template "trino.worker" . }}
  replicas: {{ .Values.server.workers }}
  podManagementPolicy: {{ .Values.worker.statefulSet.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.worker.statefulSet.updateStrategy.type }}
  selector:
    matchLabels:
      {{- include "trino.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        {{- include "trino.labels" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: {{ include "trino.serviceAccountName" . }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-worker
          image: {{ include "trino.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          env:
            {{- toYaml .Values.env | nindent 12 }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: {{ .Values.server.config.path }}
            {{- if or .Values.catalogs .Values.additionalCatalogs }}
            - name: catalog-volume
              mountPath: {{ .Values.server.config.path }}/catalog
            {{- end }}
            - name: data
              mountPath: {{ .Values.server.node.dataDir }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if $workerJmx.enabled }}
            - name: jmx-registry
              containerPort: {{ $workerJmx.registryPort }}
              protocol: TCP
            - name: jmx-server
              containerPort: {{ $workerJmx.serverPort }}
              protocol: TCP
          {{- end }}
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds | default 10 }}
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds | default 10 }}
          resources:
            requests:
              cpu: {{ .Values.worker.resources.cpu | quote }}
              memory: {{ .Values.worker.resources.memory | quote }}
            limits:
              cpu: {{ .Values.worker.resources.cpu | quote }}
              memory: {{ .Values.worker.resources.memory | quote }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "trino.worker" . }}
        {{- if or .Values.catalogs .Values.additionalCatalogs }}
        - name: catalog-volume
          configMap:
            name: {{ template "trino.catalog" . }}
        {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: {{ .Values.persistentVolumeClaim.worker.accessModes | toJson }}
      storageClassName: {{ .Values.persistentVolumeClaim.worker.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.persistentVolumeClaim.worker.size }}
{{- end }}